@page "/objectdetection"
@using static TransformersSharp.Pipelines.ObjectDetectionPipeline
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

@inject DemoApiClient DetectionApi

<PageTitle>Object Detection</PageTitle>

<style>
    .container {
        position: relative;
    }

    .detection {
        position: absolute;
        color: yellow;
        border: 5px dotted red;
        font-size: 3em;
        font-family: "Arial";
    }
</style>

<h1>Object Detection Demo</h1>

@if (detectedObjects == null)
{
    <p><em>Loading...</em></p>
}
else
{            
    <div class="container">
        <img src="@detectedObjects.Url" alt="Image of birds">
        @foreach (var o in detectedObjects.DetectionResults)
        {
            var h = o.Box.YMax - o.Box.YMin;
            var w = o.Box.XMax - o.Box.XMin;
           <div class="detection" style="left: @(o.Box.XMin)px; top: @(o.Box.YMin)px; height: @(h)px; width: @(w)px ;">@o.Label</div>
        }
    </div>
}

@code {
    private DetectResponse? detectedObjects;
    // private const string url = "https://raw.githubusercontent.com/tonybaloney/TransformersSharp/refs/heads/asr/Demo/assets/dog.jpg";

    private const string url = "https://raw.githubusercontent.com/microsoft/Generative-AI-for-beginners-dotnet/main/03-CoreGenerativeAITechniques/src/images/acestick.jpg";

    protected override async Task OnInitializedAsync()
    {
        detectedObjects = await DetectionApi.GetObjectDetectionAsync(url);
    }
}
